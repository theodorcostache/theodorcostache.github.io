{"version":3,"sources":["components/exercise/math/math.module.css","components/styled/checkbox/checkbox.module.css","components/settings/settings.module.css","components/background/background.module.css","components/app/app.module.css","model/math/types.ts","util/random.ts","model/math/operations.ts","model/math/constants.ts","model/math/helpers.ts","model/math/index.ts","model/settings/index.ts","hooks/use-settings-context.ts","components/background/background.tsx","components/context/index.ts","components/keypad/keypad.tsx","util/range.ts","components/exercise/math/math-presenter.tsx","hooks/use-input.ts","components/exercise/math/math-container.tsx","hooks/use-math-exercise.ts","components/styled/checkbox/checkbox.tsx","components/settings/settings-presenter.tsx","components/settings/settings-container.tsx","components/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","OperationSign","generateRandomInteger","min","max","random","i","Math","floor","operation","operator","left","right","allOperations","ADDITION","SUBTRACTION","DIVISION","MULTIPLICATION","strategies","level","name","operations","availableOperationsMap","Map","logic","a","b","generator","strategy","pow","leftOperand","rightOperand","NaN","isCorrect","exercise","userInput","get","exerciseOperation","solve","generateExercise","settings","operationIndex","selected","length","defaultSettings","math","available","buildDefaultSettings","result","defaultMathStrategy","userMathStrategyName","localStorage","getItem","find","e","getMathStrategy","Background","className","styles","main","SettingsContext","React","createContext","update","undefined","KEYS","from","to","step","Array","fill","map","_","range","String","push","props","submitAllowed","onKeyPress","onReset","onSubmit","v","key","onClick","type","disabled","initialValue","useState","value","setValue","reset","inputProps","onChange","event","target","useInput","onShowSettings","stats","error","setError","useEffect","header","statsContainer","stat","correct","redo","settingsButton","rainbowHr","readOnly","shake","keypad","newValue","setTimeout","useContext","setExercise","next","check","useMathExercise","answerValid","setAnswerValid","setStats","memoNext","useCallback","Number","parseInt","text","id","box","htmlFor","visible","data","availableStrategies","selectedStrategy","current","setCurrent","slider","open","onStrategyChange","checked","onClose","strategyName","newStrategy","App","settingsVisible","setSettingsVisible","settingsContext","setSettings","setItem","useSettingsContext","Provider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.78759d6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"math_main__qhMZQ\",\"header\":\"math_header__3ohR8\",\"exercise\":\"math_exercise__1kf_W\",\"settingsButton\":\"math_settingsButton__JNkn5\",\"shake\":\"math_shake__25n7A\",\"error\":\"math_error__2sPB0\",\"rainbowHr\":\"math_rainbowHr__3s02P\",\"statsContainer\":\"math_statsContainer__3wLeK\",\"stat\":\"math_stat__1b-IE\",\"keypad\":\"math_keypad___rjFj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"checkbox_box__1LsZK\",\"check\":\"checkbox_check__23ndA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"settings_slider__UvC9H\",\"open\":\"settings_open__133jX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"background_main__2kAtZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"app_main__3KU-o\"};","export type OperatorType = (a: number, b: number) => number;\r\n\r\nexport enum OperationSign {\r\n  ADDITION = \"+\",\r\n  SUBTRACTION = \"-\",\r\n  MULTIPLICATION = \"*\",\r\n  DIVISION = \":\",\r\n}\r\n\r\nexport interface MathExercise {\r\n  leftOperand: number;\r\n  rightOperand: number;\r\n  operator: OperationSign;\r\n}\r\n\r\nexport interface MathSettings {\r\n  strategy: {\r\n    available: Strategy[];\r\n    selected: Strategy;\r\n  };\r\n}\r\n\r\nexport interface Strategy {\r\n  level: number;\r\n  name: string;\r\n  operations: OperationSign[];\r\n}\r\n","export const generateRandomInteger = (min: number, max: number) => {\r\n    let random = 0\r\n    for(let i = 0; i < 10; i++){\r\n      random =  Math.floor(min + Math.random()*(max + 1 - min))\r\n    }\r\n    return random\r\n  }","import { generateRandomInteger } from \"util/random\";\r\nimport { OperationSign, OperatorType, Strategy } from \"./types\";\r\n\r\nconst operation = (operator: OperatorType) => (left: number) => (right: number) => operator(left, right);\r\n\r\n/**\r\n * Addition\r\n */\r\nexport const buildAdditionOperation = () => {\r\n  const logic = operation((a, b) => a + b);\r\n\r\n  const generator = (strategy: Strategy) => {\r\n    const max = Math.pow(10, strategy.level);\r\n\r\n    const leftOperand = generateRandomInteger(0, max);\r\n    const rightOperand = generateRandomInteger(0, max - leftOperand);\r\n\r\n    return { operator: OperationSign.ADDITION, leftOperand, rightOperand };\r\n  };\r\n  return { logic, generator };\r\n};\r\n\r\n/**\r\n * Subtraction\r\n */\r\nexport const buildSubtractionOperation = () => {\r\n  const logic = operation((a, b) => a - b);\r\n\r\n  const generator = (strategy: Strategy) => {\r\n    const max = Math.pow(10, strategy.level);\r\n\r\n    const leftOperand = generateRandomInteger(0, max);\r\n\r\n    const rightOperand = generateRandomInteger(0, max - leftOperand);\r\n\r\n    return {\r\n      operator: OperationSign.SUBTRACTION,\r\n      leftOperand: leftOperand > rightOperand ? leftOperand : rightOperand,\r\n      rightOperand: leftOperand > rightOperand ? rightOperand : leftOperand,\r\n    };\r\n  };\r\n\r\n  return { logic, generator };\r\n};\r\n\r\n/**\r\n * Multiplication\r\n */\r\n\r\nexport const buildMultiplicationOperation = () => {\r\n  const logic = operation((a, b) => a * b);\r\n\r\n  const generator = (strategy: Strategy) => {\r\n    const max = 5 * strategy.level;\r\n\r\n    const leftOperand = generateRandomInteger(0, max);\r\n    const rightOperand = generateRandomInteger(0, max);\r\n\r\n    return { operator: OperationSign.MULTIPLICATION, leftOperand, rightOperand };\r\n  };\r\n\r\n  return { logic, generator };\r\n};\r\n\r\n/**\r\n * Division\r\n */\r\n\r\nexport const buildDivisionOperation = () => {\r\n  const logic = operation((a, b) => (b !== 0 ? a / b : NaN));\r\n\r\n  const generator = (strategy: Strategy) => {\r\n    const max = 5 * strategy.level;\r\n\r\n    const leftOperand = generateRandomInteger(0, max);\r\n\r\n    const rightOperand = generateRandomInteger(0, max);\r\n\r\n    return {\r\n      operator: OperationSign.DIVISION,\r\n      leftOperand: leftOperand * rightOperand,\r\n      rightOperand: rightOperand > 0 ? rightOperand : 1,\r\n    };\r\n  };\r\n  return { logic, generator };\r\n};\r\n","import {\r\n  buildAdditionOperation,\r\n  buildDivisionOperation,\r\n  buildMultiplicationOperation,\r\n  buildSubtractionOperation,\r\n} from \"./operations\";\r\nimport { OperationSign, Strategy } from \"./types\";\r\n\r\nconst allOperations = [\r\n  OperationSign.ADDITION,\r\n  OperationSign.SUBTRACTION,\r\n  OperationSign.DIVISION,\r\n  OperationSign.MULTIPLICATION,\r\n];\r\n\r\nexport const strategies: Strategy[] = [\r\n  { level: 1, name: \"easy\", operations: [OperationSign.ADDITION, OperationSign.SUBTRACTION] },\r\n  { level: 2, name: \"medium\", operations: allOperations },\r\n  { level: 3, name: \"hard\", operations: allOperations },\r\n];\r\n\r\nexport const availableOperationsMap = new Map([\r\n  [OperationSign.ADDITION, buildAdditionOperation()],\r\n  [OperationSign.SUBTRACTION, buildSubtractionOperation()],\r\n  [OperationSign.MULTIPLICATION, buildMultiplicationOperation()],\r\n  [OperationSign.DIVISION, buildDivisionOperation()],\r\n]);\r\n\r\nexport const defaultSettings = {\r\n  strategy: {\r\n    available: strategies,\r\n    selected: strategies[1],\r\n  },\r\n};\r\n","import { availableOperationsMap } from \"./constants\";\r\nimport { MathExercise } from \"./types\";\r\n\r\nconst solve = (exercise: MathExercise) => {\r\n  const { leftOperand, rightOperand, operator } = exercise;\r\n  const exerciseOperation = availableOperationsMap.get(operator)!;\r\n  const result = exerciseOperation.logic(leftOperand)(rightOperand);\r\n\r\n  return result;\r\n};\r\n\r\nexport const isCorrect = (exercise: MathExercise) => (userInput: number) => {\r\n  const correctResult = solve(exercise);\r\n  const isCorrect = correctResult === userInput;\r\n\r\n  return isCorrect;\r\n};\r\n","import { generateRandomInteger } from \"util/random\";\r\nimport { availableOperationsMap } from \"./constants\";\r\nimport { MathExercise, MathSettings } from \"./types\";\r\n\r\nexport * from \"./constants\";\r\nexport * from \"./helpers\";\r\nexport * from \"./types\";\r\n\r\nexport const generateExercise = (settings: MathSettings): MathExercise => {\r\n  const operationIndex = generateRandomInteger(0, settings.strategy.selected.operations.length - 1);\r\n  const operator = settings.strategy.selected.operations[operationIndex];\r\n\r\n  return availableOperationsMap.get(operator)!.generator(settings.strategy.selected);\r\n};\r\n","import { MathSettings, defaultSettings as defaultMathSettings } from \"../math\";\r\n\r\nexport interface Settings {\r\n  math: MathSettings;\r\n}\r\n\r\nexport const defaultSettings = {\r\n  math: defaultMathSettings,\r\n};","import { useState } from \"react\";\r\nimport { defaultSettings, Settings } from \"../model/settings\";\r\n\r\nconst getMathStrategy = () => {\r\n  const defaultMathStrategy = defaultSettings.math.strategy.selected;\r\n  const userMathStrategyName = localStorage.getItem(\"mathStrategy\");\r\n  const userMathStrategy = defaultSettings.math.strategy.available.find((e) => e.name === userMathStrategyName);\r\n  return userMathStrategy || defaultMathStrategy;\r\n}\r\n\r\nconst buildDefaultSettings = () => {\r\n  const result = defaultSettings;\r\n  result.math.strategy.selected = getMathStrategy();\r\n  return result;\r\n};\r\n\r\nexport const useSettingsContext = () => {\r\n  const [settings, setSettings] = useState(buildDefaultSettings);\r\n  const update = (settings: Settings) => {\r\n    localStorage.setItem(\"mathStrategy\", settings.math.strategy.selected.name);\r\n    setSettings(settings);\r\n  };\r\n\r\n  return { value: { settings, update } };\r\n};\r\n","import React from 'react';\r\nimport styles from './background.module.css'\r\n\r\nconst Background = () => {\r\n    return <div className={styles.main}>Background</div>\r\n}\r\nexport default Background;","import React from 'react';\r\nimport { defaultSettings, Settings } from '../../model/settings';\r\n\r\nexport const SettingsContext = React.createContext<{\r\n    settings: Settings;\r\n    update?: (settings: Settings) => void;\r\n  }>({ settings: defaultSettings, update: undefined});\r\n  ","import React from \"react\";\r\nimport { range } from \"util/range\";\r\n\r\nconst KEYS = range(1, 9).map((e) => String(e));\r\nKEYS.push('0');\r\n\r\ninterface Props {\r\n  submitAllowed: boolean;\r\n  onKeyPress: (key: string) => void;\r\n  onReset: () => void;\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport default (props: Props) => {\r\n  const { submitAllowed, onKeyPress, onReset, onSubmit } = props;\r\n\r\n  return (\r\n    <>\r\n      {KEYS.map((v) => (\r\n        <button key={v} onClick={() =>onKeyPress(v)} type=\"button\">\r\n          {v}\r\n        </button>\r\n      ))}\r\n      <button type=\"reset\" onClick={onReset}>\r\n        Reset\r\n      </button>\r\n      <button disabled={!submitAllowed} onClick={onSubmit}>\r\n        Submit\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n","export const range = (from: number, to: number, step = 1) =>\r\n  Array(~~((to - from) / step) + 1)\r\n    .fill(0)\r\n    .map((_, i) => from + i * step);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FaCheck, FaCog, FaRedo } from \"react-icons/fa\";\r\nimport { useInput } from \"../../../hooks/use-input\";\r\nimport { Keypad } from \"../../keypad\";\r\nimport styles from \"./math.module.css\";\r\n\r\ninterface Props {\r\n  stats: { correct: number; redo: number };\r\n  error: boolean;\r\n  leftOperand: number;\r\n  rightOperand: number;\r\n  operator: string;\r\n  onSubmit: (value: string) => void;\r\n  onShowSettings: () => void;\r\n}\r\n\r\nexport default (props: Props) => {\r\n  const { value, inputProps, reset, setValue } = useInput(\"\");\r\n  const {\r\n    onSubmit,\r\n    onShowSettings,\r\n    leftOperand,\r\n    rightOperand,\r\n    operator,\r\n    stats,\r\n  } = props;\r\n  const [error, setError] = useState(props.error);\r\n  useEffect(() => setError(props.error), [props.error]);\r\n\r\n  const handleKeypadInput = (newValue: string) => setValue(value + newValue);\r\n  const handleKeypadReset = () => reset();\r\n  const handleKeypadSumit = () => {\r\n    onSubmit(value);\r\n    reset();\r\n    setError(props.error);\r\n    setTimeout(() => {\r\n      setError(false);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.main}>\r\n      <div className={styles.header}>\r\n        <div className={styles.statsContainer}>\r\n          <div className={styles.stat}>\r\n            <span>{stats.correct}</span>\r\n            <FaCheck />\r\n          </div>\r\n          <div className={styles.stat}>\r\n            <span>{stats.redo}</span>\r\n            <FaRedo />\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <FaCog\r\n            className={styles.settingsButton}\r\n            onClick={onShowSettings}\r\n          />\r\n        </div>\r\n      </div>\r\n      <hr className={styles.rainbowHr} />\r\n      <div className={styles.exercise}>\r\n        <input readOnly value={leftOperand}></input>\r\n        <span>{operator}</span>\r\n        <input readOnly value={rightOperand}></input>\r\n        <span>=</span>\r\n        <input\r\n          className={error ? styles.shake : props.error ? styles.error : \"\"}\r\n          {...inputProps}\r\n          readOnly\r\n        ></input>\r\n      </div>\r\n      <hr className={styles.rainbowHr} />\r\n      <div className={styles.keypad}>\r\n        <Keypad\r\n          onKeyPress={handleKeypadInput}\r\n          onReset={handleKeypadReset}\r\n          onSubmit={handleKeypadSumit}\r\n          submitAllowed={value !== \"\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { ChangeEvent, useState } from \"react\";\r\n\r\nexport const useInput = (initialValue: string) => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  const reset = () => setValue(\"\");\r\n  const onChange = (event: ChangeEvent<HTMLInputElement>) =>\r\n    setValue(event.target.value);\r\n  return { value, setValue, reset, inputProps: { value, onChange } };\r\n};\r\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { useMathExercise } from \"hooks/use-math-exercise\";\r\nimport { SettingsContext } from \"components/context\";\r\nimport MathPresenter from \"./math-presenter\";\r\n\r\ninterface Props {\r\n  onShowSettings: () => void;\r\n}\r\n\r\nexport default ({onShowSettings}: Props) => {\r\n  const { exercise, next, check } = useMathExercise();\r\n  const [answerValid, setAnswerValid] = useState<boolean>(true);\r\n  const [stats, setStats] = useState({ correct: 0, redo: 0 });\r\n  const { settings } = useContext(SettingsContext);\r\n  const memoNext = useCallback(next, [settings.math])\r\n  useEffect(() => { memoNext(); }, [memoNext, settings])\r\n\r\n  const isUserRight = (value: string) => check(Number.parseInt(value));\r\n\r\n  const buildNextExercise = () => {\r\n    next();\r\n    setAnswerValid(true);\r\n  };\r\n\r\n  const incrementCorrectStats = () => setStats({ ...stats, correct: stats.correct + 1 });\r\n  const incrementRedoStats = () => setStats({ ...stats, redo: stats.redo + 1 });\r\n\r\n  const handleSubmit = (userInput: string) => {\r\n    const answerValid = isUserRight(userInput);\r\n    if(answerValid){\r\n      buildNextExercise();\r\n      incrementCorrectStats();\r\n    }else {\r\n      incrementRedoStats();\r\n    }\r\n    setAnswerValid(answerValid);\r\n  };\r\n\r\n  return (\r\n    <MathPresenter\r\n      stats={stats}\r\n      leftOperand={exercise.leftOperand}\r\n      rightOperand={exercise.rightOperand}\r\n      operator={exercise.operator}\r\n      error={!answerValid}\r\n      onSubmit={handleSubmit}\r\n      onShowSettings={onShowSettings}\r\n    />\r\n  );\r\n};\r\n","import { useContext, useState } from \"react\";\r\nimport { SettingsContext } from \"../components/context\";\r\nimport { generateExercise, isCorrect, MathExercise } from \"../model/math\";\r\n\r\nexport const useMathExercise = () => {\r\n  const { settings } = useContext(SettingsContext);\r\n  const [exercise, setExercise] = useState<MathExercise>(\r\n    generateExercise(settings.math)\r\n  );\r\n  const next = () => setExercise(generateExercise(settings.math));\r\n  const check = (userInput: number): boolean => isCorrect(exercise)(userInput);\r\n  return { exercise, next, check };\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./checkbox.module.css\";\r\n\r\nexport default ({ text, id, ...props }: any) => (\r\n  <div className={styles.box}>\r\n    <input {...props} id={id} type=\"checkbox\" />\r\n    <div className={styles.check}></div>\r\n    <label htmlFor={id}>{text}</label>\r\n  </div>\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { StyledCheckBox } from \"components/styled\";\r\nimport styles from \"./settings.module.css\";\r\n\r\ninterface ViewModel {\r\n  availableStrategies: string[];\r\n  selectedStrategy: string;\r\n}\r\n\r\ninterface Props {\r\n  data: ViewModel;\r\n  visible?: boolean;\r\n  onStrategyChange?: (strategy: string) => void;\r\n}\r\n\r\nexport default (props: Props) => {\r\n  const { visible } = props;\r\n  const { availableStrategies, selectedStrategy } = props.data;\r\n  const [current, setCurrent] = useState(selectedStrategy);\r\n\r\n  const handleChange = (strategy: string) => () => {\r\n    props.onStrategyChange && props.onStrategyChange(strategy);\r\n    setCurrent(strategy);\r\n  };\r\n\r\n  return (\r\n    <div className={`${styles.slider} ${visible && styles.open}`} >\r\n      {availableStrategies.map((e) => (\r\n        <StyledCheckBox key={e} id={e} text={e} onChange={handleChange(e)} checked={e === current} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { SettingsContext } from \"../context\";\r\nimport Settings from \"./settings-presenter\";\r\n\r\ninterface Props {\r\n  onClose: () => void;\r\n  visible?: boolean;\r\n}\r\nexport default ({ onClose, visible }: Props) => {\r\n  const { settings, update } = useContext(SettingsContext);\r\n\r\n  const handleStrategyChange = (strategyName: string) => {\r\n    const newStrategy = settings.math.strategy.available.find(e => e.name === strategyName)\r\n    settings.math.strategy.selected = newStrategy!;\r\n    update && update({ ...settings });\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <Settings onStrategyChange={handleStrategyChange} data={{\r\n      availableStrategies: settings.math.strategy.available.map(e => e.name),\r\n      selectedStrategy: settings.math.strategy.selected.name\r\n    }} visible={visible}/>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useSettingsContext } from \"../../hooks/use-settings-context\";\r\nimport { Background } from \"../background\";\r\nimport { SettingsContext } from \"../context\";\r\nimport { MathExercise } from \"../exercise/math\";\r\nimport {\r\n  SettingsPanel\r\n} from \"../settings\";\r\nimport styles from \"./app.module.css\";\r\n\r\nfunction App() {\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const settingsContext = useSettingsContext();\r\n  \r\n  return (\r\n    <SettingsContext.Provider {...settingsContext}>\r\n      <div className={styles.main}>\r\n        <Background />\r\n        <MathExercise onShowSettings={() => setSettingsVisible(!settingsVisible)} />\r\n        <SettingsPanel onClose={() => setSettingsVisible(!settingsVisible)} visible={settingsVisible} />\r\n      </div>\r\n    </SettingsContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}